$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module $rootio $end
  $var wire 1 # clk $end
  $var wire 1 $ reset $end
 $upscope $end
 $scope module cpu $end
  $var wire 1 % clk $end
  $var wire 1 & reset $end
  $var wire 32 ' pc [31:0] $end
  $var wire 32 ( instruction [31:0] $end
  $var wire 32 ) pc_next [31:0] $end
  $var wire 7 * opcode [6:0] $end
  $var wire 5 + rs1 [4:0] $end
  $var wire 5 , rs2 [4:0] $end
  $var wire 5 - rd [4:0] $end
  $var wire 32 . reg_data_in [31:0] $end
  $var wire 32 / reg_data_out_1 [31:0] $end
  $var wire 32 0 reg_data_out_2 [31:0] $end
  $var wire 3 1 funct3 [2:0] $end
  $var wire 7 2 funct7 [6:0] $end
  $var wire 25 3 immi_source [24:0] $end
  $var wire 32 4 alu_control [31:0] $end
  $var wire 1 5 alu_a_sel $end
  $var wire 1 6 alu_b_sel $end
  $var wire 32 7 operand1 [31:0] $end
  $var wire 32 8 operand2 [31:0] $end
  $var wire 1 9 alu_result $end
  $var wire 32 : pc_alu_result [31:0] $end
  $var wire 32 ; pc_next_result [31:0] $end
  $var wire 1 < mem_clk $end
  $var wire 1 = pc_alu_sel $end
  $var wire 1 > pc_next_sel $end
  $var wire 1 ? pc_clk $end
  $var wire 32 @ imm_x [31:0] $end
  $var wire 2 A reg_data_sel [1:0] $end
  $var wire 1 B zero $end
  $var wire 1 C last_bit $end
  $var wire 1 D data_read $end
  $var wire 1 T! reg_clk $end
  $var wire 1 U! data_write $end
  $scope module alu $end
   $var wire 32 E alu_control [31:0] $end
   $var wire 32 F operand1 [31:0] $end
   $var wire 32 G operand2 [31:0] $end
   $var wire 5 H shamt [4:0] $end
   $var wire 32 I alu_result [31:0] $end
   $var wire 1 J zero $end
   $var wire 1 K last_bit $end
  $upscope $end
  $scope module alu_mux_1 $end
   $var wire 32 L i0 [31:0] $end
   $var wire 32 M i1 [31:0] $end
   $var wire 1 N a0 $end
   $var wire 32 O q [31:0] $end
  $upscope $end
  $scope module alu_mux_2 $end
   $var wire 32 P i0 [31:0] $end
   $var wire 32 Q i1 [31:0] $end
   $var wire 1 R a0 $end
   $var wire 32 S q [31:0] $end
  $upscope $end
  $scope module controller $end
   $var wire 1 T clock $end
   $var wire 1 U reset $end
   $var wire 7 V opcode [6:0] $end
   $var wire 3 W funct3 [2:0] $end
   $var wire 7 X funct7 [6:0] $end
   $var wire 1 Y zero $end
   $var wire 32 Z alu_control [31:0] $end
   $var wire 1 [ alu_a_sel $end
   $var wire 1 \ alu_b_sel $end
   $var wire 1 ] mem_clk $end
   $var wire 1 ^ pc_alu_sel $end
   $var wire 1 _ pc_next_sel $end
   $var wire 1 ` pc_clk $end
   $var wire 2 a reg_data_sel [1:0] $end
   $var wire 2 b alu_state [1:0] $end
  $upscope $end
  $scope module flash $end
   $var wire 32 V! DATA_WIDTH [31:0] $end
   $var wire 32 W! ADDR_WIDTH [31:0] $end
   $var wire 64 X! NVM_INIT [63:0] $end
   $var wire 1 c clk $end
   $var wire 1 d write_enable $end
   $var wire 6 e address [5:0] $end
   $var wire 32 f data_in [31:0] $end
   $var wire 1 g reset $end
   $var wire 32 h data_out [31:0] $end
  $upscope $end
  $scope module instruction_decoder $end
   $var wire 32 i instruction [31:0] $end
   $var wire 7 j opcode [6:0] $end
   $var wire 5 k rs1 [4:0] $end
   $var wire 5 l rs2 [4:0] $end
   $var wire 5 m rd [4:0] $end
   $var wire 3 n funct3 [2:0] $end
   $var wire 7 o funct7 [6:0] $end
   $var wire 25 p immi_source [24:0] $end
  $upscope $end
  $scope module mux_1 $end
   $var wire 32 q i0 [31:0] $end
   $var wire 32 r i1 [31:0] $end
   $var wire 1 s a0 $end
   $var wire 32 t q [31:0] $end
  $upscope $end
  $scope module mux_2 $end
   $var wire 32 u i0 [31:0] $end
   $var wire 32 v i1 [31:0] $end
   $var wire 1 w a0 $end
   $var wire 32 x q [31:0] $end
  $upscope $end
  $scope module reg_data_mux $end
   $var wire 32 y i0 [31:0] $end
   $var wire 32 z i1 [31:0] $end
   $var wire 32 { i2 [31:0] $end
   $var wire 32 | i3 [31:0] $end
   $var wire 2 } a0 [1:0] $end
   $var wire 32 ~ q [31:0] $end
  $upscope $end
  $scope module register_file $end
   $var wire 32 V! DATA_WIDTH [31:0] $end
   $var wire 32 Z! ADDR_WIDTH [31:0] $end
   $var wire 1 !! clk $end
   $var wire 1 "! write_enable $end
   $var wire 5 #! rs1 [4:0] $end
   $var wire 5 $! rs2 [4:0] $end
   $var wire 5 %! rd [4:0] $end
   $var wire 32 &! reg_data_in [31:0] $end
   $var wire 1 '! reset $end
   $var wire 32 (! reg_data_out_1 [31:0] $end
   $var wire 32 )! reg_data_out_2 [31:0] $end
   $var wire 32 *! registers[0] [31:0] $end
   $var wire 32 +! registers[1] [31:0] $end
   $var wire 32 ,! registers[2] [31:0] $end
   $var wire 32 -! registers[3] [31:0] $end
   $var wire 32 .! registers[4] [31:0] $end
   $var wire 32 /! registers[5] [31:0] $end
   $var wire 32 0! registers[6] [31:0] $end
   $var wire 32 1! registers[7] [31:0] $end
   $var wire 32 2! registers[8] [31:0] $end
   $var wire 32 3! registers[9] [31:0] $end
   $var wire 32 4! registers[10] [31:0] $end
   $var wire 32 5! registers[11] [31:0] $end
   $var wire 32 6! registers[12] [31:0] $end
   $var wire 32 7! registers[13] [31:0] $end
   $var wire 32 8! registers[14] [31:0] $end
   $var wire 32 9! registers[15] [31:0] $end
   $var wire 32 :! registers[16] [31:0] $end
   $var wire 32 ;! registers[17] [31:0] $end
   $var wire 32 <! registers[18] [31:0] $end
   $var wire 32 =! registers[19] [31:0] $end
   $var wire 32 >! registers[20] [31:0] $end
   $var wire 32 ?! registers[21] [31:0] $end
   $var wire 32 @! registers[22] [31:0] $end
   $var wire 32 A! registers[23] [31:0] $end
   $var wire 32 B! registers[24] [31:0] $end
   $var wire 32 C! registers[25] [31:0] $end
   $var wire 32 D! registers[26] [31:0] $end
   $var wire 32 E! registers[27] [31:0] $end
   $var wire 32 F! registers[28] [31:0] $end
   $var wire 32 G! registers[29] [31:0] $end
   $var wire 32 H! registers[30] [31:0] $end
   $var wire 32 I! registers[31] [31:0] $end
   $scope module unnamedblk1 $end
    $var wire 32 J! i [31:0] $end
   $upscope $end
  $upscope $end
  $scope module rom $end
   $var wire 32 V! DATA_WIDTH [31:0] $end
   $var wire 32 W! ADDR_WIDTH [31:0] $end
   $var wire 56 [! NVM_INIT [55:0] $end
   $var wire 1 K! clk $end
   $var wire 1 L! write_enable $end
   $var wire 6 M! address [5:0] $end
   $var wire 32 N! data_in [31:0] $end
   $var wire 1 O! reset $end
   $var wire 32 P! data_out [31:0] $end
  $upscope $end
  $scope module sign_extender $end
   $var wire 25 Q! immi_source [24:0] $end
   $var wire 7 R! opcode [6:0] $end
   $var wire 32 S! imm_x [31:0] $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
1#
0$
1%
0&
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b0000000 *
b00000 +
b00000 ,
b00000 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b000 1
b0000000 2
b0000000000000000000000000 3
b00000000000000000000000000000000 4
05
06
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
09
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
0<
0=
0>
0?
b00000000000000000000000000000000 @
b00 A
1B
0C
0D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000 H
b00000000000000000000000000000000 I
1J
0K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
0N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
0R
b00000000000000000000000000000000 S
1T
0U
b0000000 V
b000 W
b0000000 X
0Y
b00000000000000000000000000000000 Z
0[
0\
0]
0^
0_
0`
b00 a
b00 b
1c
0d
b000000 e
b00000000000000000000000000000000 f
1g
b00000000000000000000000000000000 h
b00000000000000000000000000000000 i
b0000000 j
b00000 k
b00000 l
b00000 m
b000 n
b0000000 o
b0000000000000000000000000 p
b00000000000000000000000000000000 q
b00000000000000000000000000000100 r
0s
b00000000000000000000000000000000 t
b00000000000000000000000000000000 u
b00000000000000000000000000000000 v
0w
b00000000000000000000000000000000 x
b00000000000000000000000000000000 y
b00000000000000000000000000000000 z
b00000000000000000000000000000000 {
b00000000000000000000000000000000 |
b00 }
b00000000000000000000000000000000 ~
1!!
0"!
b00000 #!
b00000 $!
b00000 %!
b00000000000000000000000000000000 &!
0'!
b00000000000000000000000000000000 (!
b00000000000000000000000000000000 )!
b00000000000000000000000000000000 *!
b00000000000000000000000000000000 +!
b00000000000000000000000000000000 ,!
b00000000000000000000000000000000 -!
b00000000000000000000000000000000 .!
b00000000000000000000000000000000 /!
b00000000000000000000000000000000 0!
b00000000000000000000000000000000 1!
b00000000000000000000000000000000 2!
b00000000000000000000000000000000 3!
b00000000000000000000000000000000 4!
b00000000000000000000000000000000 5!
b00000000000000000000000000000000 6!
b00000000000000000000000000000000 7!
b00000000000000000000000000000000 8!
b00000000000000000000000000000000 9!
b00000000000000000000000000000000 :!
b00000000000000000000000000000000 ;!
b00000000000000000000000000000000 <!
b00000000000000000000000000000000 =!
b00000000000000000000000000000000 >!
b00000000000000000000000000000000 ?!
b00000000000000000000000000000000 @!
b00000000000000000000000000000000 A!
b00000000000000000000000000000000 B!
b00000000000000000000000000000000 C!
b00000000000000000000000000000000 D!
b00000000000000000000000000000000 E!
b00000000000000000000000000000000 F!
b00000000000000000000000000000000 G!
b00000000000000000000000000000000 H!
b00000000000000000000000000000000 I!
b00000000000000000000000000100000 J!
1K!
0L!
b000000 M!
b00000000000000000000000000000000 N!
1O!
b00000000000000000000000000000000 P!
b0000000000000000000000000 Q!
b0000000 R!
b00000000000000000000000000000000 S!
0T!
0U!
b00000000000000000000000000100000 V!
b00000000000000000000000000000110 W!
b0110010001100001011101000110000100101110011101000111100001110100 X!
b00000000000000000000000000000101 Z!
b01110010011011110110110100101110011101000111100001110100 [!
#500
0#
0%
0T
0c
0!!
0K!
#1000
1#
1$
1%
1&
1T
1U
1c
1!!
1'!
1K!
#1500
0#
0%
0T
0c
0!!
0K!
#2000
1#
1%
1T
1c
1!!
1K!
#2500
0#
0%
0T
0c
0!!
0K!
#3000
1#
1%
1T
1c
1!!
1K!
#3001
